#ifndef CRYPTOGRAM_GH
#define CRYPTOGRAM_GH

#include <crypto.gh>

//Associated information of a cryptogram
fixpoint int cg_info(cryptogram cg);

predicate cryptogram(char* array, int len, list<crypto_char> ccs, cryptogram cg) =
  crypto_chars(secret, array, len, ccs) &*&
  ccs == ccs_for_cg(cg) && cg_is_gen_or_pub(cg)
;

fixpoint option<list<crypto_char> > cg_payload(cryptogram cg)
{
  switch(cg)
  {
    case cg_hash(cs1):                         return some(cs1);
    case cg_hmac(p1, c1, cs1):                 return some(cs1);
    case cg_encrypted(p1, c1, cs1, ent1):      return some(cs1);
    case cg_auth_encrypted(p1, c1, cs1, ent1): return some(cs1);
    case cg_asym_encrypted(p1, c1, cs1, ent1): return some(cs1);
    case cg_asym_signature(p1, c1, cs1, ent1): return some(cs1);
    default: return none;
  }
}

inductive tag =
  | tag_nonce
  | tag_symmetric_key
  | tag_public_key
  | tag_private_key
  | tag_hash
  | tag_hmac
  | tag_encrypted
  | tag_auth_encrypted
  | tag_asym_encrypted
  | tag_asym_signature
;

fixpoint tag tag_for_cg(cryptogram cg)
{
  switch(cg)
  {
    case cg_nonce(p1, c1):                     return tag_nonce;
    case cg_symmetric_key(p1, c1):             return tag_symmetric_key;
    case cg_public_key(p1, c1):                return tag_public_key;
    case cg_private_key(p1, c1):               return tag_private_key;
    case cg_hash(cs1):                         return tag_hash;
    case cg_hmac(p1, c1, cs1):                 return tag_hmac;
    case cg_encrypted(p1, c1, cs1, ent1):      return tag_encrypted;
    case cg_auth_encrypted(p1, c1, cs1, ent1): return tag_auth_encrypted;
    case cg_asym_encrypted(p1, c1, cs1, ent1): return tag_asym_encrypted;
    case cg_asym_signature(p1, c1, cs1, ent1): return tag_asym_signature;
  }
}

lemma void ccs_for_cg_inj(cryptogram cg1, cryptogram cg2);
  requires tag_for_cg(cg1) == tag_for_cg(cg2) &*&
           ccs_for_cg(cg1) == ccs_for_cg(cg2);
  ensures  col || cg1 == cg2;

lemma cryptogram ccs_for_cg_sur(list<crypto_char> ccs, tag t);
  requires true;
  ensures  t == tag_for_cg(result) &*&
           ccs == ccs_for_cg(result);

//Proven lemmas

lemma_auto void cryptogram();
  requires [?f]cryptogram(?array, ?count, ?ccs, ?cg);
  ensures  [f]cryptogram(array, count, ccs, cg) &*&
           ccs == ccs_for_cg(cg) && cg_is_gen_or_pub(cg);

lemma_auto void cryptogram_inv();
  requires [?f]cryptogram(?array, ?count, ?cs, ?cg);
  ensures  [f]cryptogram(array, count, cs, cg) &*& length(cs) == count;

lemma void cryptogram_limits(char *array);
  requires [?f]cryptogram(array, ?count, ?cs, ?cg) &*&
           true == ((char *)0 <= array) &*& array <= (char *)UINTPTR_MAX;
  ensures  [f]cryptogram(array, count, cs, cg) &*&
           true == ((char *)0 <= array) &*& array + count <= (char *)UINTPTR_MAX;

#endif
