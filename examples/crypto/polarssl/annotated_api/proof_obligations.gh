#ifndef ATTACKER_PROOF_OBLIGATIONS_H
#define ATTACKER_PROOF_OBLIGATIONS_H

#define PACK_PROOF_OBLIGATIONS(PREFIX) \
{ \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_bad_random_is_public) : \
    polarssl_bad_random_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_random){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_bad_key_is_public) : \
    polarssl_bad_key_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_key){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_key_is_public) : \
    polarssl_public_key_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_random){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_bad_private_key_is_public) : \
    polarssl_bad_private_key_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_random){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_hash_is_public) : \
    polarssl_hash_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_hash){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_hmac_is_public) : \
    polarssl_public_hmac_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_hmac){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_encryption_is_public) : \
    polarssl_public_encryption_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_encrypted){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_decryption_is_public) : \
    polarssl_public_decryption_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_key, PREFIX##_encrypted){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_auth_encryption_is_public) : \
    polarssl_public_auth_encryption_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_encrypted){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_auth_decryption_is_public) : \
    polarssl_public_auth_decryption_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_key, PREFIX##_encrypted){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_asym_encryption_is_public) : \
    polarssl_public_asym_encryption_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_encrypted){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_asym_decryption_is_public) : \
    polarssl_public_asym_decryption_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_key, PREFIX##_encrypted){ call(); }; \
produce_lemma_function_pointer_chunk \
    (PREFIX##_polarssl_public_asym_signature_is_public) : \
    polarssl_public_asym_signature_is_public \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred) \
    (PREFIX##_sig){ call(); }; \
close polarssl_proof_obligations \
    (PREFIX##_polarssl_pub, PREFIX##_proof_pred); \
}

#define POLARSSL_PROOFS_DEFAULT(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_RANDOM(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_KEY(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_PUBLIC_KEY(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_PRIVATE_KEY(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_HASH(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_HMAC(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_ENCRYPTED(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_DECRYPTED(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_AUTH_ENCRYPTED(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_AUTH_DECRYPTED(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX, LEVEL) \
  DEFAULT_IS_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX, LEVEL) \

#define DEFAULT_IS_PUBLIC_RANDOM(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_bad_random_is_public(polarssl_cryptogram random) \
  requires random == polarssl_random(?p, _) &*& \
           true == bad(p); \
  ensures  [_]PREFIX##_polarssl_pub(random); \
{ \
  close PREFIX##_polarssl_pub(random); \
  leak PREFIX##_polarssl_pub(random); \
}

#define DEFAULT_IS_PUBLIC_KEY(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_bad_key_is_public(polarssl_cryptogram key) \
  requires key == polarssl_symmetric_key(?p, _) &*& \
           true == bad(p); \
  ensures  [_]PREFIX##_polarssl_pub(key); \
{ \
  close PREFIX##_polarssl_pub(key); \
  leak PREFIX##_polarssl_pub(key); \
}

#define DEFAULT_IS_PUBLIC_PUBLIC_KEY(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_key_is_public(polarssl_cryptogram key) \
  requires key == polarssl_public_key(_, _); \
  ensures  [_]PREFIX##_polarssl_pub(key); \
{ \
  close PREFIX##_polarssl_pub(key); \
  leak PREFIX##_polarssl_pub(key); \
}

#define DEFAULT_IS_PUBLIC_PRIVATE_KEY(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_bad_private_key_is_public(polarssl_cryptogram key) \
  requires key == polarssl_private_key(?p, _) &*& \
           bad(p) == true; \
  ensures  [_]PREFIX##_polarssl_pub(key); \
{ \
  close PREFIX##_polarssl_pub(key); \
  leak PREFIX##_polarssl_pub(key); \
}

#define DEFAULT_IS_PUBLIC_HASH(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_hash_is_public(polarssl_cryptogram hash) \
  requires hash == polarssl_hash(?pay) &*& \
           length(pay) <= INT_MAX &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(hash); \
{ \
  close PREFIX##_polarssl_pub(hash); \
  leak PREFIX##_polarssl_pub(hash); \
}

#define DEFAULT_IS_PUBLIC_HMAC(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_hmac_is_public(polarssl_cryptogram hmac) \
  requires hmac == polarssl_hmac(?p, ?c, ?pay) &*& \
           length(pay) <= INT_MAX &*& \
           [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(hmac); \
{ \
  open  [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)); \
  POLARSSL_SWITCH_1(PREFIX, polarssl_symmetric_key(p, c)); \
  assert bad(p) == true; \
  close PREFIX##_polarssl_pub(hmac); \
  leak PREFIX##_polarssl_pub(hmac); \
}

#define DEFAULT_IS_PUBLIC_ENCRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_encryption_is_public(polarssl_cryptogram encrypted) \
  requires encrypted == \
             polarssl_encrypted(?p, ?c, ?pay, ?ent) &*& \
           length(pay) <= INT_MAX &*& \
           [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(encrypted); \
{ \
  open  [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)); \
  POLARSSL_SWITCH_1(PREFIX, polarssl_symmetric_key(p, c)); \
  close PREFIX##_polarssl_pub(encrypted); \
  leak PREFIX##_polarssl_pub(encrypted); \
}

#define DEFAULT_IS_PUBLIC_DECRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_decryption_is_public( \
                         polarssl_cryptogram key, polarssl_cryptogram encrypted) \
  requires key == polarssl_symmetric_key(?p, ?c) &*& \
           encrypted == polarssl_encrypted(p, c, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(key) &*& \
           [_]PREFIX##_polarssl_pub(encrypted); \
  ensures  [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
{ \
  open  [_]PREFIX##_polarssl_pub(key); \
  open  [_]PREFIX##_polarssl_pub(encrypted); \
  \
  POLARSSL_SWITCH_1(PREFIX, polarssl_symmetric_key(p, c)); \
  assert true == bad(p); \
}

#define DEFAULT_IS_PUBLIC_AUTH_ENCRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_auth_encryption_is_public( \
                                          polarssl_cryptogram encrypted) \
  requires encrypted == polarssl_auth_encrypted(?p, ?c, ?mac, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(encrypted); \
{ \
  open  [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)); \
  POLARSSL_SWITCH_1(PREFIX, polarssl_symmetric_key(p, c)); \
  close PREFIX##_polarssl_pub(encrypted); \
  leak PREFIX##_polarssl_pub(encrypted); \
}

#define DEFAULT_IS_PUBLIC_AUTH_DECRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_auth_decryption_is_public( \
                         polarssl_cryptogram key, polarssl_cryptogram encrypted) \
  requires key == polarssl_symmetric_key(?p, ?c) &*& \
           encrypted == polarssl_auth_encrypted(p, c, ?mac, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(key) &*& \
           [_]PREFIX##_polarssl_pub(encrypted); \
  ensures  [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
{ \
  open  [_]PREFIX##_polarssl_pub(key); \
  open  [_]PREFIX##_polarssl_pub(encrypted); \
  \
  POLARSSL_SWITCH_1(PREFIX, polarssl_symmetric_key(p, c)); \
  assert true == bad(p); \
}

#define DEFAULT_IS_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_asym_encryption_is_public( \
                                          polarssl_cryptogram encrypted) \
  requires encrypted == \
             polarssl_asym_encrypted(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(polarssl_public_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(encrypted); \
{ \
  open  [_]PREFIX##_polarssl_pub(polarssl_public_key(p, c)); \
  POLARSSL_SWITCH_1(PREFIX, polarssl_public_key(p, c)); \
  close PREFIX##_polarssl_pub(encrypted); \
  leak PREFIX##_polarssl_pub(encrypted); \
}

#define DEFAULT_IS_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_asym_decryption_is_public( \
                         polarssl_cryptogram key, polarssl_cryptogram encrypted) \
  requires key == polarssl_private_key(?p, ?c) &*& \
           encrypted == \
             polarssl_asym_encrypted(p, c, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(key) &*& \
           [_]PREFIX##_polarssl_pub(encrypted); \
  ensures  [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
{ \
  open  [_]PREFIX##_polarssl_pub(key); \
  open  [_]PREFIX##_polarssl_pub(encrypted); \
  \
  POLARSSL_SWITCH_1(PREFIX, polarssl_private_key(p, c)); \
  assert true == bad(p); \
}

#define DEFAULT_IS_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_asym_signature_is_public( \
                                          polarssl_cryptogram sig) \
  requires sig == polarssl_asym_signature(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(polarssl_private_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(sig); \
{ \
  open  [_]PREFIX##_polarssl_pub(polarssl_private_key(p, c)); \
  POLARSSL_SWITCH(PREFIX, polarssl_private_key(p, c), 1); \
  close PREFIX##_polarssl_pub(sig); \
  leak PREFIX##_polarssl_pub(sig); \
}

#define POLARSSL_PROOFS_ASSUME(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_RANDOM(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_KEY(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_PUBLIC_KEY(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_PRIVATE_KEY(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_HASH(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_HMAC(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_ENCRYPTED(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_DECRYPTED(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_AUTH_ENCRYPTED(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_AUTH_DECRYPTED(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX, LEVEL) \
  ASSUME_IS_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX, LEVEL) \

#define ASSUME_IS_PUBLIC_RANDOM(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_bad_random_is_public(polarssl_cryptogram random) \
  requires random == polarssl_random(?p, _) &*& \
           true == bad(p); \
  ensures  [_]PREFIX##_polarssl_pub(random); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_KEY(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_bad_key_is_public(polarssl_cryptogram key) \
  requires key == polarssl_symmetric_key(?p, _) &*& \
           true == bad(p); \
  ensures  [_]PREFIX##_polarssl_pub(key); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_PUBLIC_KEY(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_key_is_public(polarssl_cryptogram key) \
  requires key == polarssl_public_key(_, _); \
  ensures  [_]PREFIX##_polarssl_pub(key); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_PRIVATE_KEY(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_bad_private_key_is_public(polarssl_cryptogram key) \
  requires key == polarssl_private_key(?p, _) &*& \
           bad(p) == true; \
  ensures  [_]PREFIX##_polarssl_pub(key); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_HASH(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_hash_is_public( \
                                          polarssl_cryptogram hash) \
  requires hash == polarssl_hash(?pay) &*& \
           length(pay) <= INT_MAX &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(hash); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_HMAC(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_hmac_is_public( \
                                          polarssl_cryptogram hmac) \
  requires hmac == polarssl_hmac(?p, ?c, ?pay) &*& \
           length(pay) <= INT_MAX &*& \
           [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(hmac); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_ENCRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_encryption_is_public( \
                                          polarssl_cryptogram encrypted) \
  requires encrypted == \
             polarssl_encrypted(?p, ?c, ?pay, ?ent) &*& \
           length(pay) <= INT_MAX &*& \
           [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(encrypted); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_DECRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_decryption_is_public( \
                         polarssl_cryptogram key, polarssl_cryptogram encrypted) \
  requires key == polarssl_symmetric_key(?p, ?c) &*& \
           encrypted == polarssl_encrypted(p, c, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(key) &*& \
           [_]PREFIX##_polarssl_pub(encrypted); \
  ensures  [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_AUTH_ENCRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_auth_encryption_is_public( \
                                          polarssl_cryptogram encrypted) \
  requires encrypted == polarssl_auth_encrypted(?p, ?c, ?mac, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(polarssl_symmetric_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(encrypted); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_AUTH_DECRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_auth_decryption_is_public( \
                         polarssl_cryptogram key, polarssl_cryptogram encrypted) \
  requires key == polarssl_symmetric_key(?p, ?c) &*& \
           encrypted == polarssl_auth_encrypted(p, c, ?mac, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(key) &*& \
           [_]PREFIX##_polarssl_pub(encrypted); \
  ensures  [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_asym_encryption_is_public( \
                                          polarssl_cryptogram encrypted) \
  requires encrypted == \
             polarssl_asym_encrypted(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(polarssl_public_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(encrypted); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_asym_decryption_is_public( \
                         polarssl_cryptogram key, polarssl_cryptogram encrypted) \
  requires key == polarssl_private_key(?p, ?c) &*& \
           encrypted == \
             polarssl_asym_encrypted(p, c, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(key) &*& \
           [_]PREFIX##_polarssl_pub(encrypted); \
  ensures  [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX, LEVEL) \
lemma void PREFIX##_polarssl_public_asym_signature_is_public( \
                                          polarssl_cryptogram sig) \
  requires sig == polarssl_asym_signature(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_polarssl_pub(polarssl_private_key(p, c)) &*& \
           [_]polarssl_public_generated_chars(PREFIX##_polarssl_pub)(pay); \
  ensures  [_]PREFIX##_polarssl_pub(sig); \
{ \
  assume (false); \
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#define POLARSSL_SWITCH(PREFIX, root, LEVEL) \
  POLARSSL_SWITCH_##LEVEL(PREFIX, root)

#define POLARSSL_SWITCH_LIST(PREFIX, root, LEVEL) \
switch(root) \
{ \
  case cons(cg___, cgs___): \
    assert  [_]PREFIX##_polarssl_pub(cgs___); \
    POLARSSL_SWITCH(PREFIX, cg___, LEVEL); \
  case nil: \
    assert true; \
}

#define POLARSSL_SWITCH_1(PREFIX, root) \
switch (root) \
{ \
  case polarssl_random(p__1, c__1): \
    assert true; \
  case polarssl_symmetric_key(p__1, c__1): \
    assert true; \
  case polarssl_public_key(p__1, c__1): \
    assert true; \
  case polarssl_private_key(p__1, c__1): \
    assert true; \
  case polarssl_hash(cs__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_hmac(p__1, c__1, cs__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_encrypted(p__1, c__1, cs__1, ent__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_auth_encrypted(p__1, c__1, mac__1, cs__1, ent__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_asym_encrypted(p__1, c__1, cs__1, ent__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_asym_signature(p__1, c__1, cs__1, ent__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
}

#define POLARSSL_SWITCH_2(PREFIX, root) \
switch (root) \
{ \
  case polarssl_random(p__2, c__2): \
    assert true; \
  case polarssl_symmetric_key(p__2, c__2): \
    assert true; \
  case polarssl_public_key(p__2, c__2): \
    assert true; \
  case polarssl_private_key(p__2, c__2): \
    assert true; \
  case polarssl_hash(cs__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_hmac(p__2, c__2, cs__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_encrypted(p__2, c__2, cs__2, ent__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_auth_encrypted(p__2, c__2, mac__2, cs__2, ent__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_asym_encrypted(p__2, c__2, cs__2, ent__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case polarssl_asym_signature(p__2, c__2, cs__2, ent__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
}

#endif
