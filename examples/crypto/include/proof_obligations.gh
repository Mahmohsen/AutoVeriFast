#ifndef PROOF_OBLIGATIONS_GH
#define PROOF_OBLIGATIONS_GH

#include "switch_primitives.gh"

#define PACK_PROOF_OBLIGATIONS(PREFIX) \
{ \
  produce_lemma_function_pointer_chunk(PREFIX##_public_collision) : \
    public_collision(PREFIX##_pub)(PREFIX##_i){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_data) : \
    public_data(PREFIX##_pub)(PREFIX##_data){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_pair_compose) : \
    public_pair_compose(PREFIX##_pub)(PREFIX##_first, PREFIX##_second){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_pair_decompose) : \
    public_pair_decompose(PREFIX##_pub)(PREFIX##_pair){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_nonce) : \
    public_nonce(PREFIX##_pub)(PREFIX##_nonce){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_incremented_nonce) : \
    public_incremented_nonce(PREFIX##_pub)(PREFIX##_nonce1, PREFIX##_nonce2){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_hash) : \
    public_hash(PREFIX##_pub)(PREFIX##_hash){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_symmetric_key) : \
    public_symmetric_key(PREFIX##_pub)(PREFIX##_key){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_public_key) : \
    public_public_key(PREFIX##_pub)(PREFIX##_key){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_private_key) : \
    public_private_key(PREFIX##_pub)(PREFIX##_key){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_hmac) : \
    public_hmac(PREFIX##_pub)(PREFIX##_hmac){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_symmetric_encrypted) : \
    public_symmetric_encrypted(PREFIX##_pub)(PREFIX##_enc){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_symmetric_encrypted_entropy) : \
    public_symmetric_encrypted_entropy(PREFIX##_pub)(PREFIX##_enc, PREFIX##_ent){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_symmetric_decrypted) : \
    public_symmetric_decrypted(PREFIX##_pub)(PREFIX##_enc){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_asymmetric_encrypted) : \
    public_asymmetric_encrypted(PREFIX##_pub)(PREFIX##_enc){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_asymmetric_encrypted_entropy) : \
    public_asymmetric_encrypted_entropy(PREFIX##_pub)(PREFIX##_enc, PREFIX##_ent){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_asymmetric_decrypted) : \
    public_asymmetric_decrypted(PREFIX##_pub)(PREFIX##_enc){ call(); }; \
  produce_lemma_function_pointer_chunk(PREFIX##_public_asymmetric_signature) : \
    public_asymmetric_signature(PREFIX##_pub)(PREFIX##_sig){ call(); }; \
  close proof_obligations(PREFIX##_pub); \
}

#define PROOFS_DEFAULT(PREFIX) \
  DEFAULT_PUBLIC_COLLISION(PREFIX) \
  DEFAULT_PUBLIC_DATA(PREFIX) \
  DEFAULT_PUBLIC_PAIR_COMPOSE(PREFIX) \
  DEFAULT_PUBLIC_PAIR_DECOMPOSE(PREFIX) \
  DEFAULT_PUBLIC_NONCE(PREFIX) \
  DEFAULT_PUBLIC_INCREMENTED_NONCE(PREFIX) \
  DEFAULT_PUBLIC_HASH(PREFIX) \
  DEFAULT_PUBLIC_SYMMETRIC_KEY(PREFIX) \
  DEFAULT_PUBLIC_PUBLIC_KEY(PREFIX) \
  DEFAULT_PUBLIC_PRIVATE_KEY(PREFIX) \
  DEFAULT_PUBLIC_HMAC(PREFIX) \
  DEFAULT_PUBLIC_SYMMETRIC_ENCRYPTED(PREFIX) \
  DEFAULT_PUBLIC_SYMMETRIC_ENCRYPTED_ENTROPY(PREFIX) \
  DEFAULT_PUBLIC_SYMMETRIC_DECRYPTED(PREFIX) \
  DEFAULT_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX) \
  DEFAULT_PUBLIC_ASYMMETRIC_ENCRYPTED_ENTROPY(PREFIX) \
  DEFAULT_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX) \
  DEFAULT_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX)

#define DEFAULT_PUBLIC_COLLISION(PREFIX) \
lemma void PREFIX##_public_collision(item i) \
  requires true == collision_in_run(); \
  ensures  [_]PREFIX##_pub(i); \
{ \
  close PREFIX##_pub(i); \
  leak PREFIX##_pub(i); \
}

#define DEFAULT_PUBLIC_DATA(PREFIX) \
lemma void PREFIX##_public_data(item data) \
  requires data == data_item(?d); \
  ensures  [_]PREFIX##_pub(data); \
{ \
  get_info_for_item(data); \
  close PREFIX##_pub(data); \
  leak PREFIX##_pub(data); \
}

#define DEFAULT_PUBLIC_PAIR_COMPOSE(PREFIX) \
lemma void PREFIX##_public_pair_compose(item first, item second) \
  requires [_]PREFIX##_pub(first) &*& [_]PREFIX##_pub(second); \
  ensures  [_]PREFIX##_pub(pair_item(first, second)); \
{ \
  item pair = pair_item(first, second); \
  get_info_for_item(pair); \
  close PREFIX##_pub(pair); \
  leak PREFIX##_pub(pair); \
}

#define DEFAULT_PUBLIC_PAIR_DECOMPOSE(PREFIX) \
lemma void PREFIX##_public_pair_decompose(item pair) \
  requires [_]PREFIX##_pub(pair_item(?first, ?second)); \
  ensures  [_]PREFIX##_pub(first) &*& [_]PREFIX##_pub(second); \
{ \
  open [_]PREFIX##_pub(pair_item(first, second)); \
  if (collision_in_run()) \
  { \
    PREFIX##_public_collision(first); \
    PREFIX##_public_collision(second); \
  } \
}

#define DEFAULT_PUBLIC_NONCE(PREFIX) \
lemma void PREFIX##_public_nonce(item nonce) \
  requires  nonce == nonce_item(?p0, ?c0, ?inc0) &*& true == bad(p0); \
  ensures   [_]PREFIX##_pub(nonce); \
{ \
  get_info_for_item(nonce); \
  close PREFIX##_pub(nonce); \
  leak PREFIX##_pub(nonce); \
}

#define DEFAULT_PUBLIC_INCREMENTED_NONCE(PREFIX) \
lemma void PREFIX##_public_incremented_nonce(item nonce1, item nonce2) \
  requires  nonce1 == nonce_item(?p, ?c, ?inc1) &*& \
            nonce2 == nonce_item(p, c, ?inc2) &*& \
            [_]PREFIX##_pub(nonce1); \
  ensures   [_]PREFIX##_pub(nonce2); \
{ \
  open [_]PREFIX##_pub(nonce1); \
  if (collision_in_run()) \
  { \
    PREFIX##_public_collision(nonce2); \
  } \
  else \
  { \
    get_info_for_item(nonce1); \
    open [_]PREFIX##_pub(nonce1); \
    info_for_incremented_nonce(nonce1, inc1, inc2); \
    close PREFIX##_pub(nonce2); \
    leak PREFIX##_pub(nonce2); \
  } \
}

#define DEFAULT_PUBLIC_HASH(PREFIX) \
lemma void PREFIX##_public_hash(item hash) \
  requires  hash == hash_item(?pay) &*& \
            switch(pay) \
            { \
              case some(pay0): \
                return [_]PREFIX##_pub(pay0); \
              case none: \
                return true; \
            }; \
  ensures   [_]PREFIX##_pub(hash); \
{ \
  get_info_for_item(hash); \
  close PREFIX##_pub(hash); \
  leak PREFIX##_pub(hash); \
}

#define DEFAULT_PUBLIC_SYMMETRIC_KEY(PREFIX) \
lemma void PREFIX##_public_symmetric_key(item key) \
  requires  key == symmetric_key_item(?p0, _) &*& true == bad(p0); \
  ensures   [_]PREFIX##_pub(key); \
{ \
  get_info_for_item(key); \
  close PREFIX##_pub(key); \
  leak PREFIX##_pub(key); \
}

#define DEFAULT_PUBLIC_PUBLIC_KEY(PREFIX) \
lemma void PREFIX##_public_public_key(item key) \
  requires  key == public_key_item(?p, _); \
  ensures   [_]PREFIX##_pub(key); \
{ \
  get_info_for_item(key); \
  close PREFIX##_pub(key); \
  leak PREFIX##_pub(key); \
}

#define DEFAULT_PUBLIC_PRIVATE_KEY(PREFIX) \
lemma void PREFIX##_public_private_key(item key) \
  requires  key == private_key_item(?p0, _) &*& true == bad(p0); \
  ensures   [_]PREFIX##_pub(key); \
{ \
  get_info_for_item(key); \
  close PREFIX##_pub(key); \
  leak PREFIX##_pub(key); \
}

#define DEFAULT_PUBLIC_HMAC(PREFIX) \
lemma void PREFIX##_public_hmac(item hmac) \
  requires  hmac == hmac_item(?p, ?c, ?pay) &*& \
            switch(pay) \
            { \
              case some(pay0): \
                return [_]PREFIX##_pub(symmetric_key_item(p, c)) &*& \
                       [_]PREFIX##_pub(pay0); \
              case none: \
                return true; \
            }; \
  ensures   [_]PREFIX##_pub(hmac); \
{ \
  get_info_for_item(hmac); \
  switch(pay) \
  { \
    case some(pay0): \
      open [_]PREFIX##_pub(symmetric_key_item(p, c)); \
      open [_]PREFIX##_pub(pay0); \
    case none: \
  }; \
  close PREFIX##_pub(hmac); \
  leak PREFIX##_pub(hmac); \
}

#define DEFAULT_PUBLIC_SYMMETRIC_ENCRYPTED(PREFIX) \
lemma void PREFIX##_public_symmetric_encrypted(item enc) \
  requires  enc == symmetric_encrypted_item(?p, ?c, ?pay, ?ent) &*& \
            switch(pay) \
            { \
              case some(pay0): \
                return [_]PREFIX##_pub(symmetric_key_item(p, c)) &*&  \
                       [_]PREFIX##_pub(pay0); \
              case none: \
                return true; \
            }; \
  ensures   [_]PREFIX##_pub(enc); \
{ \
  if (!collision_in_run()) \
  { \
    get_info_for_item(enc); \
    assert [_]info_for_item(enc, ?info0); \
    switch(pay) \
    { \
      case some(pay0): \
        item key = symmetric_key_item(p, c); \
        open [_]PREFIX##_pub(key); \
        assert [_]info_for_item(key, ?info1); \
        info_for_symmetric_encrypted_item(key, enc); \
        close PREFIX##_pub(enc); \
        leak PREFIX##_pub(enc); \
      case none: \
        close PREFIX##_pub(enc); \
        leak PREFIX##_pub(enc); \
    }; \
  } \
  else \
  { \
    close PREFIX##_pub(enc); \
    leak PREFIX##_pub(enc); \
  } \
}

#define DEFAULT_PUBLIC_SYMMETRIC_ENCRYPTED_ENTROPY(PREFIX) \
lemma void PREFIX##_public_symmetric_encrypted_entropy(item enc, list<char> ent) \
  requires  [_]PREFIX##_pub(enc) &*& \
            enc == symmetric_encrypted_item(?p, ?c, ?pay, ?ent0); \
  ensures   [_]PREFIX##_pub(symmetric_encrypted_item(p, c, pay, ent)); \
{ \
  item key = symmetric_key_item(p, c); \
  item enc2 = symmetric_encrypted_item(p, c, pay, ent); \
  if (collision_in_run()) \
  { \
    PREFIX##_public_collision(enc2); \
  } \
  else \
  { \
    switch(pay) \
    { \
      case some(pay1): \
        open [_]PREFIX##_pub(enc); \
        assert [_]info_for_item(enc, ?info1); \
        get_info_for_item(enc2); \
        assert [_]info_for_item(enc2, ?info2); \
        get_info_for_item(key); \
        assert [_]info_for_item(key, ?info3); \
        info_for_symmetric_encrypted_item(key, enc); \
        info_for_symmetric_encrypted_item(key, enc2); \
        close PREFIX##_pub(enc2); \
        leak PREFIX##_pub(enc2); \
      case none: \
        PREFIX##_public_symmetric_encrypted(enc2); \
    } \
  } \
}


#define DEFAULT_PUBLIC_SYMMETRIC_DECRYPTED(PREFIX) \
lemma void PREFIX##_public_symmetric_decrypted(item enc) \
  requires enc == symmetric_encrypted_item(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(enc) &*& [_]PREFIX##_pub(symmetric_key_item(p, c)); \
  ensures  switch(pay) \
           { \
             case some(pay0): \
               return [_]PREFIX##_pub(pay0); \
             case none: \
               return true; \
           }; \
{ \
  switch(pay) \
  { \
    case some(pay0): \
      if (collision_in_run()) \
      { \
        PREFIX##_public_collision(pay0); \
      } \
      else \
      { \
        open [_]PREFIX##_pub(enc); \
        assert [_]info_for_item(enc, ?info0); \
        item key = symmetric_key_item(p, c); \
        open [_]PREFIX##_pub(key); \
        assert [_]info_for_item(key, ?info1); \
        info_for_symmetric_encrypted_item(key, enc); \
      } \
    case none: \
  } \
}

#define DEFAULT_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX) \
lemma void PREFIX##_public_asymmetric_encrypted(item enc) \
  requires  enc == asymmetric_encrypted_item(?p, ?c, ?pay, ?ent) &*& \
            switch(pay) \
            { \
              case some(pay0): \
                return [_]PREFIX##_pub(public_key_item(p, c)) &*&  \
                       [_]PREFIX##_pub(pay0); \
              case none: \
                return true; \
            }; \
  ensures   [_]PREFIX##_pub(enc); \
{ \
  if (!collision_in_run()) \
  { \
    get_info_for_item(enc); \
    assert [_]info_for_item(enc, ?info0); \
    switch(pay) \
    { \
      case some(pay0): \
        item key = public_key_item(p, c); \
        open [_]PREFIX##_pub(key); \
        assert [_]info_for_item(key, ?info1); \
        info_for_asymmetric_encrypted_item(key, enc); \
        close message_tag(enc)(10); \
        leak message_tag(enc)(10); \
        close PREFIX##_pub(enc); \
        leak PREFIX##_pub(enc); \
      case none: \
        close PREFIX##_pub(enc); \
        leak PREFIX##_pub(enc); \
    }; \
  } \
  else \
  { \
    close PREFIX##_pub(enc); \
    leak PREFIX##_pub(enc); \
  } \
}

#define DEFAULT_PUBLIC_ASYMMETRIC_ENCRYPTED_ENTROPY(PREFIX) \
lemma void PREFIX##_public_asymmetric_encrypted_entropy(item enc, list<char> ent) \
  requires  [_]PREFIX##_pub(enc) &*& \
            enc == asymmetric_encrypted_item(?p, ?c, ?pay, ?ent0); \
  ensures   [_]PREFIX##_pub(asymmetric_encrypted_item(p, c, pay, ent)); \
{ \
  item key = public_key_item(p, c); \
  item enc2 = asymmetric_encrypted_item(p, c, pay, ent); \
  if (collision_in_run()) \
  { \
    PREFIX##_public_collision(enc2); \
  } \
  else \
  { \
    switch(pay) \
    { \
      case some(pay1): \
        open [_]PREFIX##_pub(enc); \
        assert [_]info_for_item(enc, ?info1); \
        get_info_for_item(enc2); \
        assert [_]info_for_item(enc2, ?info2); \
        get_info_for_item(key); \
        assert [_]info_for_item(key, ?info3); \
        info_for_asymmetric_encrypted_item(key, enc); \
        info_for_asymmetric_encrypted_item(key, enc2); \
        assert [_]message_tag(enc)(?tag); \
        close message_tag(enc2)(tag); \
        leak message_tag(enc2)(tag); \
        close PREFIX##_pub(enc2); \
        leak PREFIX##_pub(enc2); \
      case none: \
        PREFIX##_public_asymmetric_encrypted(enc2); \
    } \
  } \
}


#define DEFAULT_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX) \
lemma void PREFIX##_public_asymmetric_decrypted(item enc) \
  requires enc == asymmetric_encrypted_item(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(enc) &*& [_]PREFIX##_pub(private_key_item(p, c)); \
  ensures  switch(pay) \
           { \
             case some(pay0): \
               return [_]PREFIX##_pub(pay0); \
             case none: \
               return true; \
           }; \
{ \
  switch(pay) \
  { \
    case some(pay0): \
      if (collision_in_run()) \
      { \
        PREFIX##_public_collision(pay0); \
      } \
      else \
      { \
        open [_]PREFIX##_pub(enc); \
        assert [_]info_for_item(enc, ?info0); \
        item key = private_key_item(p, c); \
        item key_pub = public_key_item(p, c); \
        open [_]PREFIX##_pub(key); \
        assert [_]info_for_item(key, ?info1); \
        get_info_for_item(key_pub); \
        assert [_]info_for_item(key_pub, ?info2); \
        info_for_asymmetric_keypair(key_pub, key); \
        info_for_asymmetric_encrypted_item(key_pub, enc); \
      } \
    case none: \
  } \
}

#define DEFAULT_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX) \
lemma void PREFIX##_public_asymmetric_signature(item sig) \
  requires  sig == asymmetric_signature_item(?p, ?c, ?pay, ?ent) &*& \
            switch(pay) \
            { \
              case some(pay0): \
                return [_]PREFIX##_pub(private_key_item(p, c)) &*&  \
                       [_]PREFIX##_pub(pay0); \
              case none: \
                return true; \
            }; \
  ensures   [_]PREFIX##_pub(sig); \
{ \
  if (!collision_in_run()) \
  { \
    get_info_for_item(sig); \
    assert [_]info_for_item(sig, ?info0); \
    switch(pay) \
    { \
      case some(pay0): \
        item key = private_key_item(p, c); \
        open [_]PREFIX##_pub(key); \
        assert [_]info_for_item(key, ?info1); \
        info_for_asymmetric_signature_item(key, sig); \
        close PREFIX##_pub(sig); \
        leak PREFIX##_pub(sig); \
      case none: \
        close PREFIX##_pub(sig); \
        leak PREFIX##_pub(sig); \
    }; \
  } \
  else \
  { \
    close PREFIX##_pub(sig); \
    leak PREFIX##_pub(sig); \
  } \
}

#endif
