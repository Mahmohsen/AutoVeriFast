#ifndef AUXILIARY_DEFINITIONS_GH
#define AUXILIARY_DEFINITIONS_GH

#include "nat.gh"
#include "list.gh"
#include "listex.gh"
#include <crypto.gh>

//Int pairs, to encode information
fixpoint int int_left(int p);
fixpoint int int_right(int p);
fixpoint int int_pair(int f, int s);

lemma_auto void int_left_int_pair(int f, int s);
  requires true;
  ensures  int_left(int_pair(f, s)) == f;

lemma_auto void int_right_int_pair(int f, int s);
  requires true;
  ensures  int_right(int_pair(f, s)) == s;

//The optional string type
predicate option_string(char *s; list<char> cs) =
  s == 0 ?
    cs == nil
  :
    string(s, cs)
;

//Hide a char chunck
predicate hide_chars(char *buffer, int length, list<char> cs) =
  chars(buffer, length, cs)
;

predicate hide_crypto_chars(crypto_chars_kind kind, char *buffer, int length, list<char> cs) =
  crypto_chars(kind, buffer, length, cs)
;

//Power fixpoint
fixpoint int pow(int n, nat e)
{
  switch (e)
  {
    case succ(e0): return n * pow(n, e0);
    case zero: return 1;
  }
}

//Maximum/minimum of a list of ints
fixpoint int maximum(list<int> ints)
{
  switch (ints)
  {
    case cons(i, r_ints):
      return i >= maximum(r_ints) ?
        i
      :
        maximum(r_ints);
    case nil:
      return INT_MIN;
  }
}

fixpoint int minimum(list<int> ints)
{
  switch (ints)
  {
    case cons(i, r_ints):
      return i <= minimum(r_ints) ?
        i
      :
        minimum(r_ints);
    case nil:
      return INT_MAX;
  }
}

//Union of two set lists
fixpoint list<t> union<t>(list<t> xs, list<t> ys)
{
  switch(xs)
  {
    case cons(x0, xs0):
      return mem(x0, ys) ?
        union(xs0, ys)
      :
        cons(x0, union(xs0, ys));
    case nil:
      return ys;
  }
}

//Dummy foreach
predicate dummy_foreach<t>(list<t> xs, predicate(t) p) =
  switch (xs)
  {
    case nil: return true;
    case cons(x, xs0): return [_]p(x) &*& [_]dummy_foreach(xs0, p);
  }
;

//Proven lemmas

lemma void union_nil<t>(list<t> xs);
  requires true;
  ensures  union(xs, nil) == xs && union(nil, xs) == xs;

lemma void union_subset<t>(list<t> xs, list<t> ys);
  requires subset(xs, ys) == true;
  ensures  union(xs, ys) == ys;

lemma void union_refl<t>(list<t> xs);
  requires true;
  ensures  union(xs, xs) == xs;

lemma void forall_union<t>(list<t> xs, list<t> ys, fixpoint(t, bool) p);
  requires forall(xs, p) && forall(ys, p);
  ensures  true == forall(union(xs,ys), p);

lemma void forall_subset<t>(list<t> xs, list<t> ys, fixpoint(t, bool) p);
  requires forall(ys, p) && subset(xs, ys);
  ensures  true == forall(xs, p);

lemma void dummy_foreach_extract<t>(t x, list<t> xs);
  requires [_]dummy_foreach(xs, ?p) &*& mem(x, xs) == true;
  ensures  [_]p(x);

lemma void dummy_foreach_singleton<t>(predicate(t) p, t x);
  requires [_]p(x);
  ensures  [_]dummy_foreach(cons(x, nil), p);

lemma void dummy_foreach_union<t>(list<t> xs, list<t> ys);
  requires [_]dummy_foreach(xs, ?p) &*& [_]dummy_foreach(ys, p);
  ensures  [_]dummy_foreach(union(xs, ys), p);

lemma void dummy_foreach_subset<t>(list<t> xs, list<t> ys);
  requires [_]dummy_foreach(ys, ?p) &*& true == subset(xs, ys);
  ensures  [_]dummy_foreach(xs, p);

#endif
