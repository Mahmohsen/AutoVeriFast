#ifndef CRYPTOGRAM_BOUNDS_GH
#define CRYPTOGRAM_BOUNDS_GH

#include "auxiliary_definitions.gh"
#include "cryptogram.gh"

//An upper bound on the the exact set of cryptograms exposed by a list of characters
fixpoint bool cgs_in_chars_upper_bound(list<char> cs, list<cryptogram> cgs);

lemma_auto void cgs_in_chars_upper_bound_(list<char> cs);
  requires true;
  ensures  true == cgs_in_chars_upper_bound(cs, cgs_in_chars(cs));

lemma_auto void cgs_in_chars_upper_bound_subset(list<char> cs, list<cryptogram> cgs);
  requires true == cgs_in_chars_upper_bound(cs, cgs);
  ensures  true == subset(cgs_in_chars(cs), cgs);

lemma void cgs_in_chars_upper_bound_superset(list<char> cs,
                                             list<cryptogram> cgs1,
                                             list<cryptogram> cgs2);
  requires true == subset(cgs1, cgs2) &*&
           true == cgs_in_chars_upper_bound(cs, cgs1);
  ensures  true == cgs_in_chars_upper_bound(cs, cgs2);

lemma void cgs_in_chars_upper_bound_split(list<char> cs,
                                          list<cryptogram> cgs, int i);
  requires 0 <= i &*& i <= length(cs) && cgs_in_chars_upper_bound(cs, cgs);
  ensures  true == cgs_in_chars_upper_bound(take(i, cs), cgs) &*&
           true == cgs_in_chars_upper_bound(drop(i, cs), cgs);

lemma void cgs_in_chars_upper_bound_join(list<char> cs1, list<cryptogram> cgs1,
                                         list<char> cs2, list<cryptogram> cgs2);
  requires true == cgs_in_chars_upper_bound(cs1, cgs1) &*&
           true == cgs_in_chars_upper_bound(cs2, cgs2);
  ensures  true == cgs_in_chars_upper_bound(append(cs1, cs2),
                                            union(cgs1, cgs2));

#endif
